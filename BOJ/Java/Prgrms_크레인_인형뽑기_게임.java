import java.util.Stack;


/**
* 프로그래머스 크레인 인형뽑기 게임 (JAVA)
 * 문제 분석
 * 주어지는 행렬에서 주어지는 명령(열)을 기준으로 위에서 부터 0이 아닌 값을 가져와 바구니에 담는다.
 * 바구니에 같은 값이 연속으로 들어오면 두개의 값이 터진다.
 * 총 터진 인형의 개수는?
 *
 * 아이디어(sudo code)
 * 1. 바구니와 터진 인형의 개수를 저장할 변수를 선언한다.
 * 2. for문으로 명령이 주어진 리스트에서 값을 꺼내온다.
 * 3. 명령에서 주어진 번호를 열로 두고 while을 통해 0번 행부터 0이 아닌 값이 있는 행까지 찾는다.
 * 4. 현재 행이 범위를 넘어서지 않았거나 해당 열이 전체가 비어 있지 않다면! -> 조건을 만족하지 않으면 그냥 넘어간다
 * 5. 값을 선택하고 바구니의 맨 위의 값과 비교한다.
 * 6. 바구니의 맨 위의 값과 같다면 pop()을 통해 꺼내오고 터진인형의 개수를 2개 올린다.
 * 7. 맨 위의 값과 같지 않다면 바구니에 담는다
 * 8. 터진 인형의 개수를 출력한다.
* */

public class Prgrms_크레인_인형뽑기_게임 {
    public int solution(int[][] board, int[] moves) {
        Stack<Integer> basket = new Stack<>(); // 바구니
        int cnt = 0; // 터진 인형의 개수

        for(int j: moves){ // 주어지는 움직임 리스트에서 열을 꺼내온다.
            int i = 0; --j; // 행 번호 열번호를 0번부터 시작하게끔
            // 행이 보드의 크기를 넘지 않으면서 0이 아닐때까지 반복
            while(i<board.length && board[i][j]==0) i++;
            if(i< board.length && board[i][j]!=0){ // 어떤 조건으로 while을 벗어낫는지 알 수 없음으로 다시 조건으로 필터링
                int dollNum = board[i][j]; // 뽑은 인형의 번호
                board[i][j] = 0; // 뽑았기 때문에 0으로 바꿔줌
                // 바구니가 비어 있지 않고 맨 위의 값과 같다면
                if(!basket.isEmpty() && basket.peek()==dollNum){
                    basket.pop(); // 바구니의 들어 있는 값을 빼낸다
                    cnt += 2; // 터진 인형의 개수를 2개 늘려준다
                    continue; // 반복문 처음으로 돌아간다
                }
                basket.push(dollNum); // 위 조건을 만족하지 못했다면 바구니에 담는다
            }
        }
    return cnt; // 터진 인형의 개수 반환
    }
}
