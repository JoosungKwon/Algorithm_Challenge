"""
백준 11286번 절대값 힙
힙 모듈을 사용자 기준으로 활용하여 문제를 풀 수 있는가?
문제
1. 배열에 정수 x (x ≠ 0)를 넣는다.
2. 배열에서 절댓값이 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다.
3. 단, 절댓값이 가장 작은 값이 여러개일 때는, 가장 작은 수를 출력하고, 그 값을 배열에서 제거한다.
입력
첫째 줄에 연산의 개수 N(1≤N≤100,000)
그 후 정수 x가 N개 주어진다.
만약 x가 0이 아니라면 배열에 x라는 값을 넣는(추가하는) 연산이고,
x가 0이라면 배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 배열에서 제거하는 경우이다.
입력되는 정수는 -2^31보다 크고, 2^31보다 작다. -> int 범위 내
출력
입력에서 0이 주어진 회수만큼 답을 출력한다.
만약 배열이 비어 있는 경우인데 절댓값이 가장 작은 값을 출력하라고 한 경우에는 0을 출력하면 된다.
"""

"""
아이디어(sudo code)
데이터를 사용자 기준으로 두기 위해서는 (절대값,원본값)처럼 튜플 형태로 push한다.
따라서 힙 모듈은 절대값을 기준으로 min정렬이 된다.
0이 입력되었을 때 절대값 기준으로 가장 작은 값이 반환된다.
하지만 여기서 멈추지 말고 만약 절대값이 같은 값이 있다면 전부 pop한다.
이후 원본값을 기준으로 가장 작은 값을 리턴하고 나머지는 다시 푸시 한다.

1. 힙 모듈을 불러온다.
2. 데이터를 입력받아 heappush 로 (절대값,원본값)를 넣고 빠져나간다.
3. 만약 데이터의 값이 0이라면 heappop으로 데이터를 빼고 리스트에 임시 저장한다. 
4. 이때, 힙에 데이터가 없다면 0을 출력하고 빠져나간다.
4. 그 후 다음 heappop의 값이 그 전 데이터와 절대값이 같다면 임시 리스트에 저장하고 아니라면 다시 push 한다.
5. 리스트에서 가장 작은 원본 값을 리턴하고 리스트에 나머지 값은 다시 push한다. 
"""

import sys
import heapq

heap = list() # 힙의 역할

N = int(sys.stdin.readline().rstrip()) # 연산의 개수
for _ in range(N):
    x = int(sys.stdin.readline().rstrip()) # 데이터
    if x: heapq.heappush(heap,(abs(x),x)) ; continue # 데이터가 0이 아니라면 데이터를 입력받아 heappush 로 (절대값,원본값)를 넣고 빠져나간다.
    if len(heap) == 0: print(0) ; continue  #힙에 데이터가 없다면 0을 출력하고 빠져나간다.
    tmp = [list(heapq.heappop(heap))] # 데이터가 0이면서 힙에 데이터가 남아있는 경우에 도달 가능, heappop으로 데이터를 빼고 임시 리스트에 저장한다.
    while len(heap) > 0 and tmp[0][0] == heap[0][0]:  # 그 후 다음 heappop의 값이 그 전 데이터와 절대값이 같지 않을 때까지 임시 리스트에 저장한다.
        tmp.append(list(heapq.heappop(heap)))
    tmp.sort(key= lambda x: x[1]) # 임시 리스트에서 가장 작은 값을 찾기 위해 정렬
    print(tmp[0][1]) # 리스트에서 가장 작은 원본 값을 출력
    for lst in tmp[1:]: # 리스트에 남아있는 값은 다시 push한다.
        heapq.heappush(heap, (lst[0], lst[1]))





























