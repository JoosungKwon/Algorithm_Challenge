''' 프로그래머스 크레인 인형뽑기 게임 문제
- 게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 --> 행렬
각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. --> 0으로 주어짐
모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. -> 위에서 아래로 확인한다
만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. --> 스택 자료구조 사용 peek를 통해 같으면 pop()
위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다. --> pop할시에 cnt += 2
크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. --> 리스트 안의 원소가 0이면 무시함
게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때,
크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

[예시]
[[0,0,0,0,0]
 [0,0,1,0,3]
 [0,2,5,0,1]
 [4,2,4,4,2]
 [3,5,1,3,1]]
 [1,5,3,5,1,2,1,4]
 4 --> 4 <3 <1 1> 3>  2 4

[제한사항]
board 행렬의 크기는 "5 x 5" 이상 "30 x 30" -> 스스로 길이를 구해야함!
board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
0은 빈 칸을 나타냅니다.
1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
moves 배열의 크기는 1 이상 1,000 이하입니다.
moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.

'''

def solution(board, moves):
    # 터진 인형 개수
    cnt = 0
    # 바구니 , 스택으로 활용
    basket = list()
    # 잡으려는 위치로 이동
    for j in moves:
        i = 0
        # 크레인이 잡기 위해 내려가는 동작을 구현
        while i < len(board) and board[i][j-1] == 0:
            i += 1

        if i < len(board) and board[i][j - 1] != 0:
            #  인형 번호
            doll_num = board[i][j - 1]
            # 인형을 뽑았으면 빈칸으로 만들어 줘야함
            board[i][j - 1] = 0
            # 바구니에 같은 값이 있다면 넣지 않고 맨위의 값이랑 비교한 후에 같다면 터트리고 2개 ++
            if len(basket) > 0 and basket[-1] == doll_num:
                basket.pop()
                cnt +=2
                continue
            # 만약 위 조건을 만족하지 못하면 바구니에 넣는다.
            basket.append(doll_num)
    return cnt


board = [[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]
moves = [1,5,3,5,1,2,1,4]

print(solution(board,moves))























